[
    {
        "title": "Introduction to Computer Graphics",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n1 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nUnit 1 \nIntroduction of Computer Graphics \nComputer graphics is a field related to the generation of graphics using computer. It includes \nthe creation, storage and manipulation of images of object. These objects come from diverse \nfield such as medicine, physical, mathematical, engineering, architecture, entertainment, \nadvertisement. \n- It is related to the generation and the representation of graphics by a computer using \nspecialized graphic hardware and software. The graphics can be photographs, drawings, \nmovies, or simulation etc. \n- Computer graphics today is largely interactive; that is the user controls the contents \nstructure and appearance of images of the objects by using input devices such as \nkeyboard, mouse, or touch sensitive panel on the screen. \n \nMain task \nImaging: Formation of an image. \n        -  representation of 2D images. \nModelling: Representing 3D images. \nRendering: Constructing 2D images from 3D models. \nAnimation: Stimulating changes over time. \n           -  describing how objects change in time. \n \nBasic Concepts \nRaster: A rectangular array of points and dots. \nPixel (picture element): One dot or picture element of the raster. \nScan line: A row of pixel. \nBit map: Ones and Zeros representation of rectangular array of point on the screen. \n Black & white → bitmap \n Color→ pixmap \n        \n        \n        \n        \n        \n        \n        \n \nNote: we don’t have any pixel like 1.2, 5.8. \n   Raster device co-ordinate can have only integer values. \nScan line \nn-1 \n0 \n \nm×n raster \n \nm-1 \n \nPixel",
        "keywords": [
            "Computer Graphics",
            "Graphics",
            "Images",
            "Objects",
            "Interactive",
            "Input Devices",
            "Raster",
            "Pixel",
            "Scan Line",
            "Bit Map"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 1
    },
    {
        "title": "Applications of Computer Graphics",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n2 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nApplications of Computer Graphics \nDifferent application area of computer graphics: \n- Graphical user interface (GUI) \n- Entertainment \n- Education and training \n- Computer animation \n- Simulation and modeling \n- Office automation \n- Image processing \n- Research \n- Computer art  \n- Cartography \n- Computer aided design (CAD) \nComputer Graphics Vs Image Processing \n                \nComputer graphics Image processing \nComputer graphics involves in generating \nimages from mathematical or geometrical \nmodels. \nImage processing involves in analyzing the \nimages to generate mathematical or \nGeometrical models. \nIt includes the creation, storage and \nmanipulation of images or objects. \nIt is the part of computer graphics that \nhandles image manipulation or \ninterpretation. \nE.g. Drawing a picture E.g. Making blur image visible. \n \nGraphics Hardware System \n \n \n \n \n \n \n \n \nCPU \n System \nmodelling \nGraphics \ncontroller \n \nGraphics \nLibrary \nGraphics \nsoftware \nGraphics \nmonitor \nI/O device",
        "keywords": [
            "Applications",
            "Computer Graphics",
            "GUI",
            "Entertainment",
            "Education",
            "Animation",
            "Simulation",
            "Office Automation",
            "Image Processing"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 2
    },
    {
        "title": "Cathode Ray Tube (CRT)",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n3 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nCathode Ray Tube (CRT) \nA CRT is an evacuated glass tube, with a heating element on one end and phosphor-coated \nscreen on the other end. \nWhen current flows through heating filament, the electrons are piled upon the filament. These \nelectrons are attracted by accelerating systems on the phosphor coated screen. When electron \nstrikes on the screen, the phosphor emits a small spot of light at each position contacted by \nthe electron beam. The glowing positions are used to represent the picture in the screen. \n                          \nFig: Cathode-ray tube (CRT) \n \nFluorescence / Phosphorescence \n- When the beam of electron emitted by electron gun strikes phosphor coated screen on the \nCRT, the phosphor emits a small spot of light at each position contacted by the electron \nbeam, such phenomenon is known as fluorescence / phosphorescence. \n- It last just a fraction of millisecond. \n \nPersistence \n- How long a phosphor continues to emit light after the electron beam is removed? \n-  Persistence of phosphor is defined as time it takes for emitted light to decay to 1/10 \n(10%) of its original intensity. Range of persistence of different phosphors can react many \nseconds. \n- The phosphor used for graphics display device usually have persistence of 10 to 60 \nmicrosecond. \n \nResolution \n- Resolution is defined as the maximum number of points that can be displayed \nhorizontally and vertically without overlap on display device. \n \nHorizontal scan rate \n- The horizontal scan rate is the number of scan lines per second. The rate is approximately \nthe product of the refresh rate and the number of scan lines.",
        "keywords": [
            "Cathode Ray Tube",
            "CRT",
            "Phosphor",
            "Electron Beam",
            "Fluorescence",
            "Phosphorescence",
            "Persistence",
            "Resolution",
            "Horizontal Scan Rate"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 3
    },
    {
        "title": "Display Technologies",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n4 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nAspect Ratio \n- It gives the ratio of vertical point to horizontal point necessary to produce equal length \nlines in both directions on the screen. \n- An aspect ratio of ¾ means that a vertical line plotted with 3 points has the same length as \na horizontal line plotted with 4 points. \n \nRefresh Rate \n- Light emitted by phosphor fades very rapidly, so to keep the drawn picture glowing \nconstantly; it is required to redraw the picture repeatedly and quickly directing the \nelectron beam back over the some point. The no of times/sec the image is redrawn to give \na feeling of non-flickering pictures is called refresh-rate. \n- If Refresh rate decreases, flicker develops. \n- Refresh rate above which flickering stops and steady it may be called as critical fusion \nfrequency (CFF). \n \nRaster and Vector Graphics \nA raster image is made up of pixels, each a different color, arranged to display an image \nwhere as a vector image is made up of paths, each with a mathematical formula (vector), that \ntells the path how it is shaped and what color it is bordered with or filled by. \n \nRaster Graphics Vector Graphics \nRaster graphics are composed of pixels. Vector graphics are composed of paths. \nRaster image pixels do not keep on their \nappearance as size increases- when you \nblow a photograph up, it becomes blurry for \nthis reason. \nVector images keep on appearance \nregardless of size, since the mathematical \nformulas dictate how the image is rendered.",
        "keywords": [
            "Display Technologies",
            "Aspect Ratio",
            "Refresh Rate",
            "Raster Graphics",
            "Vector Graphics",
            "Pixels",
            "Paths"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 4
    },
    {
        "title": "Raster Scan Display",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n5 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nDisplay Technologies: \n \nA. Raster Scan display \n- In raster scan system, the electron beam is swept across the screen, one row at a time \nfrom top to bottom. As electron beam moves across each row, the beam intensity is \nturned on and off to create a pattern of illuminated spots. \n- Picture definition is stored in memory called frame buffer or refresh buffer. This memory \nholds the set of intensity values for all the screen points. Stored intensity values are then \nretrieved from the frame buffer and painted on the screen one row at a time. \n- Returning of electron beam from right end to left end after refreshing each scan line is \ncalled horizontal retrace. \n- At the end of each frame, the electron beam returns to the top left corner to begin next \nframe called vertical retrace. \n                               \n \nInterlaced vs. non-interlaced scan (refresh procedure) \n In interlaced scan, each frame is displayed in two passes. First pass for odd scan lines \nand another for even ones. \n In non-interlaced refresh procedure, electron beam sweeps over entire scan lines in a \nframe from top to bottom in one pass. \n \nArchitecture of Raster Scan display system: \n       \n \nFig: Architecture of raster-graphics system with a display processor",
        "keywords": [
            "Raster Scan Display",
            "Electron Beam",
            "Frame Buffer",
            "Refresh Buffer",
            "Interlaced Scan",
            "Non-interlaced Scan"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 5
    },
    {
        "title": "Video Controller",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n6 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \n- There is a special purpose processor called video controller or display controller, is used \nto control the operation of the display device. \n- When a particular command is called by the application program, the graphics subroutine \npackage sets the appropriate pixels in the frame buffer. The video controller then cycles \nthrough the frame buffer, one scan line at a time. It will bring a value of each pixel \ncontained in the frame buffer and uses it to control the intensity of the CRT electron \nbeam. \n- The display processor is a separate processor that performs graphics function such as scan \nconversion and raster operation. \n- System memory holds data and those program that execute on the CPU. \n- The display processor memory holds data plus program that perform scan conversion and \nraster operation. \n- The frame buffer stores displayable image created by scan conversion & raster operation. \nAdvantages: \n- It has an ability to fill the areas with solid colors or patterns \n- The time required for refreshing is independent of the complexity of the image \n- Low cost \nDisadvantages: \n- Its resolution is poor. \n- For Real-Time dynamics not only the end points are required to move but all the pixels in \nbetween the moved end points have to be scan converted with appropriate algorithms \nwhich might slow down the dynamic process. \n \nVideo controller \n \n- It is a special-purpose processor used to control the operation of the display device. \n- Two Registers (𝑥 𝑎𝑛𝑑 𝑦) are used to store screen pixel coordinates. \n- Initially, 𝑥 =  0 𝑎𝑛𝑑 𝑦 =  0 \n- As first scan line is generated, the x register is incremented up to 𝑥𝑚𝑎𝑥. Each pixel value \nis fetched and used to control the intensity of CRT beam. After first scan line, 𝑥 register \naddress is reset to 0 and 𝑦 register address is incremented by 1. The process is continued \nuntil the last scan line (𝑦 = 𝑦𝑚𝑎𝑥) is generated.",
        "keywords": [
            "Video Controller",
            "Display Controller",
            "Frame Buffer",
            "Display Processor",
            "Scan Conversion",
            "Raster Operation"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 6
    },
    {
        "title": "Random Scan (Vector) Display",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n7 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nB. Random Scan (Vector) Display \n \n- In random scan system, the electron beam is directed only to the part of screen where the \npicture is to be drawn. It draws a picture one line at a time, so it is also called vector \ndisplay. \n- Picture definition is stored as a set of line drawing commands in an area of memory called \nrefresh display file. \n- To display a picture, the system cycles through the set of commands in the display file. \nAfter all commands are processed, the system cycle backs to the first line command in the \nlist. \nArchitecture of Random Scan system: \n           \nFig: Architecture of vector display system \n- The graphics command in the application program are translated by the graphics package \ninto a display list (display file) stored in system memory. The display list is accessed by \nthe display processor to refresh the screen. The display processor cycles through each \ncommand in the display list once during each refresh cycle. \n- Graphics are drawn on a vector display system by directing the electron beam along \ncomponent lines of the picture. \nAdvantages: \n- Can produce output with high resolutions. \n- Better for animation than raster system since only end point information is needed. \n \nDisadvantages: \n- Cannot fill area with pattern and manipulate bits. \n- Refreshing image depends upon its complexity.",
        "keywords": [
            "Random Scan Display",
            "Vector Display",
            "Electron Beam",
            "Refresh Display File",
            "Display List",
            "Graphics Command"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 7
    },
    {
        "title": "Color CRT Monitor",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n8 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nC. Color CRT monitor \nThe CRT displays color picture by using the combination of phosphorous that emits different \ncolor light. By combining the emitted light from the different phosphorous range of color can \nbe generate. Two basic technique for producing color display with CRT are: \n1. Beam penetration method. \n2. Shadow-mask Method.  \n1. Beam penetration method:  \n- This method is commonly used for random scan system.  \n- In beam penetration method, two layers of phosphor usually red and green are coated on \nthe CRT screen, and displayed color depends on how far the electron beam penetrates \ninto phosphor layer. \n- Slow electron beam excites only the outer red layer. \n- Very fast electron beam penetrates through red and excites the inner green layer. \n- Intermediate beam speeds produce combination of red and green light. \nLimitations: \n- Quality of picture is not good as with other methods. \n- It is an inexpensive way to produce color in random scan monitors, but only four colors \nare possible. \n \n2. Shadow mask method: \n- This method is commonly used in raster scan systems because they can produce wide \nrange of colors than beam penetration. \n- A shadow mask CRT has three phosphor color dots at each pixel position. One emits red \nlight, another emits green light and third emits blue light. \n- The CRT has three electron guns, one for each color dot and shadow-mask grid is placed \njust behind the phosphor coated screen. \n- Two types of arrangements are there for shadow-mask method: \n Delta-delta arrangement \n In-line arrangement \n \n \nD. Direct-View Storage Tubes (DVST) \n- A Direct-View storage tube is a type of CRT that stores the picture information as a \ncharge distribution just behind the phosphor coated screen. \n- Two electron guns are used in DVST: \n Primary gun: Used to store the picture pattern. \n Flood gun: Used for maintaining the picture display. \nAdvantages: \n- No refreshing is needed. \n- Very complex picture can be displayed at very high resolutions without flicker. \nDisadvantages: \n- To update any part of image must redraw all parts of image. \n- Ordinarily, do not display color. \n- To erasing and redrawing process can take several second for a picture.",
        "keywords": [
            "Color CRT Monitor",
            "Phosphorous",
            "Beam Penetration Method",
            "Shadow-mask Method",
            "Direct-View Storage Tubes"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 8
    },
    {
        "title": "Flat Panel Display",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n9 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nE. Flat Panel Display \n- Flat-Panel Display refers to a class of video devices that have reduced volume, weight \nand power requirements compared to CRT. \n- There are two categories of flat panel displays: \n Emissive Displays (or emitters): Emissive displays are device that convert \nelectrical energy into light. E.g. Plasma panels, light emitting diode etc. \n Non-emissive Displays (or non-emitters): Non-emissive displays use optical \neffects to convert sunlight or light from other sources into graphics pattern. E.g. \nLiquid Crystal Display (LCD). \nLiquid Crystal Display (LCD): A LCD is a thin, flat display device made up of any number \nof pixels arrayed in front of light source or reflector. It uses very small amounts of electric \npower, and is suitable for use in battery-powered electronic devices. \n \nComparison of Raster scan system and Random scan system \nRaster scan system Random scan system \nThe electron beam is swept across the screen, one \nrow at a time, from top to bottom. \nThe electron beam is directed only to the \nparts of screen where a picture is to be \ndrawn. \nIts resolution is poor. Its resolution is good. \nPicture definition is stored as a set of intensity \nvalues for all screen point. \nPicture definition is stored as a set of line \ndrawing instructions in a display file. \nScreen points / pixels are used to draw image. Mathematical functions are used to draw an \nimage. \nUsed in system to display realistic images. Cannot draw realistic shaded scenes. \nCost is low. Cost is high. \nGraphics primitives are specified in terms of their \nendpoints and must be scan converted into their \ncorresponding pixels in the frame buffer. \nScan conversion is not required. \n \nSome Numerical Problems \nQ. Consider a RGB raster system is to be designed using 8 inch by 10 inch screen with a \nresolution of 100 pixels per inch in each direction. If we want to store 8 bits per pixel in the \nframe buffer, how much storage do we need for the frame buffer? \nSolution: \nSize of screen = 8 inch × 10 inch \nPixel per inch (Resolution) = 100 \nTotal no. of pixel = (8*100)*(10*100) = 800000 pixels \nPer pixel storage = 8 bit \nTotal storage required in frame buffer = 800000*8 bits = 6400000 bits \n            = 6400000/8 bytes = 800000 byte",
        "keywords": [
            "Flat Panel Display",
            "Emissive Displays",
            "Non-emissive Displays",
            "Liquid Crystal Display",
            "LCD"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 9
    },
    {
        "title": "Numerical Problems",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n10 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nQ. There is a system with 24 bits per pixel and resolution of 1024 by 1024. Calculate the \nsize of frame buffer. \nSolution: \nResolution = 1024 × 1024 \nTotal number of pixel = 1024*1024 = 1048576 pixels \nPer pixel storage = 24 bits  \nTotal storage required in frame buffer = 1048576*24 = 25165824 bits \n         = 25165824/8 byte \n  = 25165824/(8*1024) kb \n  = 25165824/(8*1024*1024)Mb \n  = 3 Mb \n \nQ. Consider raster system with resolution 1280 ×1024. \na) How much pixel could be accessed per second by the video controller that \nrefreshes the screen at the rate of 60 frames / second? \nb) What is the access time per pixel? \nSolution: \na) No. of pixel accessed per second = 1280*1024*60 = 78643200 pixels \nb) Since 78643200 pixels are accessed in 1 second \nAccess time per pixel = \n1\n 78643200 = 12.7 𝑛𝑎𝑛𝑜𝑠𝑒𝑐. \n \nQ. Consider a raster scan system having 12 inch by 12 inch with a resolution of 100 pixels \nper inch in each direction. If display controller of this system refresh the screen at the rate \nof 50 frames per second, how many pixels could be accessed per second and what is the \naccess time per pixel of the system. \nSolution: \nSize of screen = 12 inch × 12 inch \nResolution = 100 pixels per inch \nTotal no. of pixels in one frame = (12*100)*(12*100) \nRefresh rate = 50 frames per second \ni.e. 50 frames can be accessed in 1 sec. \nTotal no. of pixel accessed in 1 sec = 50*(12*100)*(12*100) = 72000000 pixels \nAgain, \n50 frames can be accessed in 1 sec. \n1 frames can be accessed in 1/50 sec. \n(12*100*12*100) frames can be accessed in 1/50 sec. \nThen, 1 pixel can be accessed in 1/(50*12*100*12*100) sec. \n    = 109/(50*12*100*12*100) ns \n    = 13.88 ns.",
        "keywords": [
            "Numerical Problems",
            "Frame Buffer",
            "Resolution",
            "Pixel Storage",
            "Access Time"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 10
    },
    {
        "title": "More Numerical Problems",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n11 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \n \nQ. How many k bytes does a frame buffer needs in a 600 × 400 pixels? \nSolution:  \nSuppose n bits are required to store 1 pixels.  \nThen, the size of frame buffer = resolution * bits per pixel \n     = (600*400)*n bits \n     = 240000 n/(8*1024) Kb \n     = 29.30 Kb \n \nQ. Find the aspect ratio of raster system using 8 × 10 inches screen and having 100 \npixels/inch. \nSolution: \nWe know that, \nAspect ratio = \n𝑤𝑖𝑑𝑡ℎ\nℎ𝑒𝑖𝑔ℎ𝑡 =\n8∗100\n10∗100 =\n4\n5  \nSo, aspect ratio = 4:5 \n \nQ. What is the time required to display a pixel on the monitor of size 1024 × 768 with \nrefresh rate of 60 Hz? \nSolution: \nRefresh rate = 60Hz i.e. 60 frames per second \nTotal no. of pixel in one frame = 1024*768 = 786432 pixels \n60 frames need 1 sec. \n1 frame need 1/60 sec. \n786432 pixels need 1/60 sec. \n1 pixel need 1/(60*786432) sec. = 109/(60*786432) ns = 21.19 ns \n \nQ. How much time is spent scanning across each row of pixels during screen refresh on a \nraster system with resolution 1280 ×1024 and refresh rate of 60 frames per second? \nSolution: \nResolution = 1280 × 1024 \ni.e. one frame contains 1024 scan line and each scan line consists of 1280 pixels. \nRefresh rate = 60 frames per second \ni.e. 60 frames take 1 second. \n       1 frame takes 1/60 second. \ni.e. 1024 scan line take 1/60 second i.e. 0.0166 sec. \n         1 scan line take 0.0166/1024 =0.016 sec.",
        "keywords": [
            "Numerical Problems",
            "Frame Buffer",
            "Resolution",
            "Aspect Ratio",
            "Refresh Rate"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 11
    },
    {
        "title": "More Numerical Problems",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n12 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nQ. If a pixel is accessed from the frame buffer with an average access time of 300ns then \nwill this rate produce an un-flicking effect for the screen size of 640 × 480. \nSolution: \nSize of screen = 640 × 480 \nTotal no. of pixels = 640*480=307200 \nAverage access time of one pixel = 300 ns \nTotal time required to access entire pixels of image in the screen = 307200*300= 92160000ns \n                   = 92160000/109 sec \n                   = 0.09216 sec \ni.e. one cycle take 0.09216 sec. \nNow, no. of cycles per second i.e. refresh rate =? \n0.09216 sec = 1 cycle \n1 sec = 1/0.09216 \n =10.86 \nRefresh rate = 10.86 cycles per second. \nSince the minimum refresh rate for unflicker image is 60 frames per second, hence we can \nsay the monitor produces flickering effect. \n \nQ. Calculate the total memory required to store a 10 minute video in a SVGA system with \n24 bit true color and 25 fps. \nSolution: \nThe SVGA system allows resolution = 800 × 600  \nRefresh rate = 25 fps \ni.e. 25 frames take 1 second \n1 frame takes 1/25 second = 0.04 second \nSize of video =10 minutes = 10*60 = 600 second \nTotal memory required = 800 × 600 × 600 × 0.04× 24 bit \n     = 276480000 /(8*1024*1024) Mb \n     = 32.959 Mb",
        "keywords": [
            "Numerical Problems",
            "Frame Buffer",
            "Access Time",
            "Refresh Rate",
            "Flickering Effect"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 12
    },
    {
        "title": "Graphics Software",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n13 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nGraphics Software \n \nThere are two general categories of graphics software \n General programming packages: \n Provides extensive set of graphics functions for high level languages \n(FORTRAN, C etc). \n Basic functions include those for generating picture components (straight lines, \npolygons, circles, and other figures), setting color and intensity values, selecting \nviews, and applying transformations. \n Example: GL(Graphics Library) \n \n Special-purpose application packages: \n Designed for nonprogrammers, so that users can generate displays without \nworrying about how graphics operations work. \n The interface to the graphics routines in such packages allows users to \ncommunicate with the programs in their own terms. \n Example: artist's painting programs and various business, medical, and CAD \nsystems. \n \nSoftware standards \n \nPrimary goal of standardized graphics software is portability. When packages are designed \nwith standard graphics functions, software can he moved easily from one hardware system to \nanother and used in different implementations and applications. International and national \nstandards planning organizations in many countries have cooperated in an effort to develop a \ngenerally accepted standard for computer graphics. After considerable effort, this work led to \nfollowing standards: \n \n GKS (Graphical Kernel System): This system was adopted as the first graphics software \nstandard by the International Standards Organization (ISO) and American National \nStandards Institute (ANSI). Although GKS was originally designed as a two-dimensional \ngraphics package, a three dimensional GKS extension was subsequently developed. \n \n PHIGS (Programmer’s Hierarchical Interactive Graphics Standard): Extension to \nGKS, Increased Capabilities for object modeling, color specifications, surface rendering \nand picture manipulations are provided. Subsequently, an extension of PHIGS, called \nPHIGS+, was developed to provide three-dimensional surface-shading capabilities not \navailable in PHIGS.  \nAlthough PHIGS presents a specification for basic graphics functions, it does not provide \na standard methodology for a graphics interface to output devices (i.e. still machine \ndependent). Nor does it specify methods for storing and transmitting pictures. Separate \nstandards have been developed for these areas: \n CGI (Computer Graphics interface): Standardization for device interface \n CGM (Computer Graphics Metafile): Standards for archiving and transporting \npictures",
        "keywords": [
            "Graphics Software",
            "General Programming Packages",
            "Special-purpose Application Packages",
            "Software Standards"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 13
    },
    {
        "title": "Coordinate Representations",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n14 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nCoordinate Representations \nNormally, graphics package require coordinate specification to be given with respect to \nCartesian reference frames. Each object for a scene can be defined in a separate modeling \nCartesian coordinate system, which is then mapped to world coordinates to construct the \nscene. From world coordinates, objects are transferred to normalized device coordinates, then \nto the final display device coordinates. The transformations from modeling coordinates to \nnormalized device coordinate are independent of particular devices that might be used in an \napplication. Device drivers are then used to convert normalized coordinates to integer device \ncoordinates. \nAn initial modeling-coordinate position (𝑥𝑚𝑐,𝑦𝑚𝑐) in this illustration is transferred to a \ndevice coordinate position (𝑥𝑑𝑐,𝑦𝑑𝑐) with the sequence: \n(𝑥𝑚𝑐,𝑦𝑚𝑐) → (𝑥𝑤𝑐,𝑦𝑤𝑐) → (𝑥𝑛𝑐,𝑦𝑛𝑐) →  (𝑥𝑑𝑐,𝑦𝑑𝑐) \n \nPHIGS Workstations \nGenerally, the term workstation refers to a computer system with a combination of input and \noutput devices that is designed for a single user. Some graphics system, such as PHIGS and \nGKS, use the concept of a “workstation” to specify devices or software that are to be used for \ninput or output in a particular application. A workstation identifier in these system can refer \nto a file; a single devices, such as a raster monitor; or a combination of devices, such as a \nmonitor, keyboard, and a mouse. Multiple workstation can be open to provide input or to \nreceive output in a graphics application. \n \nColor Models \nA color model is a method for explaining the properties or behavior of color within some \nparticular context. No single color model can explain all aspects of color, so we make use of \ndifferent models to help describe the different perceived characteristics of color. \n \nPhysical properties of light \n- White light consists of a spectrum of all visible colors. \n- All kinds of light can be described by the energy of each wavelength.",
        "keywords": [
            "Coordinate Representations",
            "Cartesian Reference Frames",
            "Device Drivers",
            "Color Models",
            "Physical Properties of Light"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 14
    },
    {
        "title": "Color Models",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n15 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nMost light we see is not just a single wavelength, but a combination of many wavelengths \nlike below. This profile is often referred to as a spectrum, or spectral power distribution. \n \nFrequency: \n Red: 3.8 × 1014 ℎ𝑒𝑟𝑡𝑧 \n Violet: 7.9 × 1014 ℎ𝑒𝑟𝑡𝑧 \nWavelength: \n Red: 700 nm \n Violet 400 nm \n  \n \n \n There are two types of color models: Subtractive and Additive. \nAdditive color models use light to display color while subtractive models use printing inks. \nColors perceived in additive models are the result of transmitted light. Colors perceived in \nsubtractive models are the result of reflected light.",
        "keywords": [
            "Color Models",
            "Spectrum",
            "Spectral Power Distribution",
            "Frequency",
            "Wavelength",
            "Additive Color Models",
            "Subtractive Color Models"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 15
    },
    {
        "title": "RGB and CMY Color Models",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n16 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nRGB (Red, Green, Blue) color model \n- The RGB color model used in color CRT monitors. \n- In this model, Red, Green and Blue are added together to get the resultant color white. \n \n \n- Each color point within the bounds of the cube is represented as the triple (R, G, B), \nwhere value for R, G, B are assigned in the range from 0 to 1. \n- Here RGB color place together at 120 degree. \n- All other colors are generated from these three primary colors. \n \nCMY (Cyan, Magenta, Yellow) color model \n- The CMY color model used in color printing devices. \n- In his model, Cyan, Magenta, and Yellow are added together to get the resultant color \nBLACK. \n \n \nRelation between RGB and CMY: \n \n \n \n\n\n\n\nc\nm\ny \n\n\n\n  \n\n\n\n\n1\n1\n1\n\n\n\n  \n\n\n\n\nr\ng\nb\n\n\n",
        "keywords": [
            "RGB Color Model",
            "CMY Color Model",
            "Color CRT Monitors",
            "Color Printing Devices"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 16
    },
    {
        "title": "CMYK and HSV Color Models",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n17 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nCMYK (Cyan, Magenta, Yellow, Black) color model \n- For printing and art industry the CMY model is not enough. So, fourth primary color K \n(Black) is added to CMY model. \n- CMYK (subtractive color model) is the standard color model used in offset printing for \nfull-color document. Because such printing uses inks of these four basic colors, it is often \ncalled four-color printing. \n \nHSV (Hue, Saturation, Value) color model \n- HSV is a cylindrical coordinate representation of points in an RGB color model. \nHue: the dominant color as perceived by an observer \nSaturation: the amount of white light mixed with Hue \nValue: the chromatic notion of intensity \n- HSV is described by a hexacone derived from the RGB cube. \n- (h, s, v), where h  [0, 360) and s, v  [0, 1] \nhue: angle round the hexagon \nsaturation: distance from the center \nvalue: axis through the center \n \nColor cube    Hexacone",
        "keywords": [
            "CMYK Color Model",
            "HSV Color Model",
            "Subtractive Color Model",
            "Offset Printing",
            "Four-color Printing"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 17
    },
    {
        "title": "References",
        "content": "https://collegenote.pythonanywhere.com                                     Prepared By: Jayanta Poudel \n \n18 Computer Graphics (Reference Note)                                                                      BSc.CSIT                                                                                                   \nReferences \n- Donald Hearne and M.Pauline Baker, “Computer Graphics, C Versions.” Prentice \nHall",
        "keywords": [
            "References",
            "Computer Graphics",
            "C Versions"
        ],
        "sentiment": "Neutral",
        "topic_group": "Computer Graphics",
        "chunk_id": 18
    }
]